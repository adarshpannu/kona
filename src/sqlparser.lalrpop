use std::str::FromStr;
use lalrpop_util::ParseError;

use crate::expr::{Expr::*, *};
use crate::row::*;

grammar;

pub LogExpr: Box<Expr> = {
    <LogExprFactor>,
    <l:LogExpr> "or" <r:LogExprFactor> => Box::new(Expr::LogExpr(l, LogOp::Or, r)),
};

pub LogExprFactor: Box<Expr> = {
    <l:LogExprFactor> "and" <r:RelExpr> => Box::new(Expr::LogExpr(l, LogOp::And, r)),
    RelExpr,
};

pub RelExpr: Box<Expr> = {
    <l:ArithExpr> <op:RelOp> <r:ArithExpr> => Box::new(Expr::RelExpr(l, op, r)),
    "(" <LogExpr> ")",
};

RelOp: RelOp = {
    ">" => RelOp::Gt,
    ">=" => RelOp::Ge,
    "<" => RelOp::Lt,
    "<=" => RelOp::Le,
    "!=" => RelOp::Ne,
    "=" => RelOp::Eq,
};

pub ArithExpr: Box<Expr> = {
    <l:ArithExpr> "+" <r:ArithFactor> => Box::new(Expr::ArithExpr(l, ArithOp::Add, r)),
    <l:ArithExpr> "-" <r:ArithFactor> => Box::new(Expr::ArithExpr(l, ArithOp::Sub, r)),
    ArithFactor,
};

ArithFactor: Box<Expr> = {
    <l:ArithFactor> "*" <r:Term> => Box::new(Expr::ArithExpr(l, ArithOp::Mul, r)),
    <l:ArithFactor> "/" <r:Term> => Box::new(Expr::ArithExpr(l, ArithOp::Div, r)),
    Term,
};

Term: Box<Expr> = {
    Identifier,
    Num,
    "(" <ArithExpr> ")",
};

Num: Box<Expr> = {
    r"[0-9]+" =>? isize::from_str(<>)
    .map(|i| Box::new(Literal(Datum::INT(i))))
    .map_err(|_| ParseError::User { error: "Invalid number" })
};

Identifier: Box<Expr> = {
    r"[a-zA-Z][a-zA-Z0-9]+" => Box::new(Identifier(String::from(<>)))
}
